<div class="container-fluid">
  <div class="row justify-content-center">
    <div class="col-lg-7 col-md-9">
      <div class="card mt-4">
        <div class="card-header d-flex justify-content-between align-items-center">
          <h5 class="mb-0">Edit System</h5>
        </div>
        <form id="editSystemForm" action="/system/system/<%= system.id %>/edit" method="POST" enctype="multipart/form-data">
          <div class="card-body">
            <div class="mb-3">
              <label class="form-label">System ID <span class="text-danger">*</span></label>
              <input type="text" name="system_id" class="form-control form-control-sm" value="<%= system.system_id %>" required>
            </div>
            <div class="mb-3">
              <label class="form-label">System Name <span class="text-danger">*</span></label>
              <input type="text" name="name" class="form-control form-control-sm" value="<%= system.name %>" required>
            </div>
            <div class="mb-3">
              <label class="form-label">Alias (comma separated)</label>
              <input type="text" name="alias" class="form-control form-control-sm" value="<%= Array.isArray(system.alias) ? system.alias.join(', ') : (system.alias || '') %>">
            </div>
            <div class="mb-3">
              <label class="form-label">FQDN (comma separated, optional)</label>
              <input type="text" name="fqdn" class="form-control form-control-sm" value="<%= Array.isArray(system.fqdn) ? system.fqdn.join(', ') : (system.fqdn || '') %>" placeholder="e.g. host1.example.com, host2.example.com">
            </div>
            <div class="mb-3">
              <label class="form-label">Description</label>
              <textarea name="description" class="form-control form-control-sm" rows="5" placeholder="Please provide the following information: 1) What business functions/features does this system provide? 2) What components does the system include? 3) Who are the target users of this system?"><%= system.description || '' %></textarea>
            </div>
            <div class="mb-3">
              <label class="form-label">Level</label>
              <select name="level" class="form-select form-select-sm">
                <option value="">-- Select Level --</option>
                <% if (typeof levelOptions !== 'undefined' && Array.isArray(levelOptions)) { %>
                  <% levelOptions.forEach(function(opt) { %>
                    <option value="<%= opt.id %>" <%= system.level == opt.id ? 'selected' : '' %>><%= opt.text %></option>
                  <% }) %>
                <% } %>
              </select>
            </div>
            <div class="mb-3">
              <label class="form-label">Department (Unit)</label>
              <select id="unit-select" name="department_id" class="form-control">
                <% if (system.department_id && system.department_name) { %>
                  <option value="<%= system.department_id %>" selected><%= system.department_name %></option>
                <% } %>
              </select>
            </div>
            <div class="mb-3">
              <label class="form-label">Domains</label>
              <select id="domain-select" name="domains[]" class="form-control" multiple>
                <% if (typeof selectedDomains !== 'undefined' && Array.isArray(selectedDomains)) { %>
                  <% selectedDomains.forEach(function(domain) { %>
                    <option value="<%= domain.id %>" selected><%= domain.name %></option>
                  <% }) %>
                <% } %>
              </select>
            </div>
            <div class="mb-3">
              <label class="form-label">Managers</label>
              <select id="manager-select" name="managers[]" class="form-control" multiple>
                <% if (selectedManagerObjects && selectedManagerObjects.length > 0) { %>
                  <% selectedManagerObjects.forEach(function(contact) { %>
                    <option value="<%= contact.id %>" selected><%= contact.name %> (<%= contact.email %>)</option>
                  <% }) %>
                <% } %>
              </select>
            </div>
            <div class="mb-3">
              <label class="form-label">IP Addresses</label>
              <div class="d-flex align-items-center gap-2">
                <select id="ip-select" name="ip_addresses[]" class="form-control flex-grow-1" multiple>
                  <% if (ipAddresses && selectedIPs) { %>
                    <% ipAddresses.forEach(function(ip) { %>
                      <option value="<%= ip.id %>" <%= selectedIPs.includes(ip.id) ? 'selected' : '' %>><%= ip.ip_address %></option>
                    <% }) %>
                  <% } %>
                </select>
              </div>
            </divb
            <div class="mb-3">
              <label class="form-label">Tags</label>
              <select id="tag-select" name="tags[]" class="form-control" multiple></select>
            </div>
            <div class="mb-3">
              <label class="form-label">Scope user access</label>
              <select id="scope-select" name="scopes[]" class="form-control" multiple>
                <% if (scopeOptions && scopeOptions.length > 0) { %>
                  <% scopeOptions.forEach(option => { %>
                    <option value="<%= option.id %>" <%= (system.scopes && system.scopes.includes(option.id)) ? 'selected' : '' %>><%= option.text %></option>
                  <% }) %>
                <% } %>
              </select>
              <div class="form-text">Select applicable scopes for this system. Leave empty if no specific scope is defined.</div>
            </div>
            <div class="mb-3">
              <label class="form-label">System Architecture</label>
              <select id="architecture-select" name="architecture[]" class="form-select" multiple>
                <% if (architectureOptions && architectureOptions.length > 0) { %>
                  <% architectureOptions.forEach(option => { %>
                    <option value="<%= option.id %>" <%= (system.architecture && system.architecture.includes(option.id)) ? 'selected' : '' %>><%= option.text %></option>
                  <% }) %>
                <% } %>
              </select>
              <div class="form-text">Select applicable architecture types for this system. Leave empty if no specific architecture is defined.</div>
            </div>
            <div id="existing-files-data" data-files='<%= JSON.stringify(system.docs || []) %>' style="display:none"></div>
            <div class="mb-3">
              <label class="form-label">Attached Files</label>
              <ul id="uploaded-files-list" class="list-group mb-2"></ul>
              <input type="hidden" name="delete_files" id="delete_files" value="[]">
            </div>
            <div class="mb-3">
              <label for="docs-upload-edit" class="form-label">Upload New Files</label>
              <input type="file" id="docs-upload-edit" class="form-control" multiple>
              <input type="hidden" name="uploaded_docs_edit" id="uploaded-docs-edit-hidden">
              <div id="selected-docs-list-edit" class="form-text"></div>
              <small class="form-text text-muted">You can select multiple files.</small>
            </div>
            <!-- Modal for adding new manager -->
            <div class="modal fade" id="addManagerModal" tabindex="-1" aria-labelledby="addManagerModalLabel" aria-hidden="true">
              <div class="modal-dialog">
                <div class="modal-content">
                  <div class="modal-header">
                    <h5 class="modal-title" id="addManagerModalLabel">Add New Manager</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                  </div>
                  <div class="modal-body">
                    <div class="mb-3">
                      <label class="form-label">Name</label>
                      <input type="text" class="form-control" id="new-manager-name">
                    </div>
                    <div class="mb-3">
                      <label class="form-label">Email</label>
                      <input type="email" class="form-control" id="new-manager-email">
                    </div>
                  </div>
                  <div class="modal-footer">
                    <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary btn-sm" id="save-manager-btn">Add</button>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="card-footer text-end">
            <button type="submit" class="btn btn-primary btn-sm">Save Changes</button>
            <a href="/system/system" class="btn btn-outline-secondary btn-sm ms-2">Cancel</a>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>
<!-- jQuery, Select2, Bootstrap, Font Awesome (local) -->
<script src="/vendor/jquery-3.6.0.min.js"></script>
<link href="/vendor/select2.min.css" rel="stylesheet" />
<link href="/css/select2-bootstrap-5-theme.min.css" rel="stylesheet" />
<script src="/vendor/select2.min.js"></script>
<script src="/vendor/bootstrap.min.js"></script>
<link rel="stylesheet" href="/vendor/fontawesome/css/all.min.css" />



<script>
  window.existingFiles = JSON.parse(document.getElementById('existing-files-data').getAttribute('data-files') || '[]');
  window.selectedTags = JSON.parse('<%- JSON.stringify(selectedTags || []) %>');
  window.uploadedDocsEdit = [];
  window.deleteFiles = [];
</script>
<script>
  $(function() {
    $('#manager-select').select2({
      theme: 'bootstrap-5',
      placeholder: 'Select contacts',
      allowClear: true,
      width: '100%',
      ajax: {
        url: '/organize/api/contact',
        dataType: 'json',
        delay: 250,
        data: params => ({ search: params.term }),
        processResults: data => ({ results: data }),
        cache: true
      }
    });
    $('#server-select').select2({
      theme: 'bootstrap-5',
      placeholder: 'Select server(s)',
      width: '100%',
      allowClear: true,
      ajax: {
        url: '/server/api/server',
        dataType: 'json',
        delay: 250,
        data: params => ({ search: params.term }),
        processResults: data => ({ results: data }),
        cache: true
      }
    });
    $('#ip-select').select2({
      theme: 'bootstrap-5',
      placeholder: 'Select IP addresses',
      allowClear: true,
      width: '100%',
      ajax: {
        url: '/network/api/ip-addresses',
        dataType: 'json',
        delay: 250,
        data: params => ({ search: params.term }),
        processResults: data => ({ results: data }),
        cache: true
      }
    });
    $('#tag-select').select2({
      theme: 'bootstrap-5',
      placeholder: 'Select tag(s)',
      allowClear: true,
      width: '100%',
      ajax: {
        url: '/organize/api/tag',
        dataType: 'json',
        delay: 250,
        data: params => ({ search: params.term }),
        processResults: data => ({ results: data }),
        cache: true
      }
    });
    $('#domain-select').select2({
      theme: 'bootstrap-5',
      placeholder: 'Select domain(s)',
      allowClear: true,
      width: '100%',
      ajax: {
        url: '/network/api/domain',
        dataType: 'json',
        delay: 250,
        data: params => ({ search: params.term }),
        processResults: data => ({ results: data }),
        cache: true
      }
    });
    $('#scope-select').select2({
      theme: 'bootstrap-5',
      placeholder: 'Select scopes (optional)',
      allowClear: true,
      width: '100%'
    });
    $('#architecture-select').select2({
      theme: 'bootstrap-5',
      placeholder: 'Select architecture types (optional)',
      allowClear: true,
      width: '100%'
    });
    $('#unit-select').select2({
      theme: 'bootstrap-5',
      placeholder: 'Select department',
      allowClear: true,
      width: '100%',
      ajax: {
        url: '/organize/api/unit',
        dataType: 'json',
        delay: 250,
        data: params => ({ search: params.term }),
        processResults: data => ({ results: data }),
        cache: true,
        xhrFields: { withCredentials: true }
      }
    });
    // Load selected tags for edit (nếu có)
    if (window.selectedTags && Array.isArray(window.selectedTags) && window.selectedTags.length > 0) {
      $.ajax({
        url: '/organize/api/tag',
        dataType: 'json',
        data: { search: '' },
        success: function(data) {
          var selected = [];
          var selectedTagIds = window.selectedTags.map(function(t) { return (typeof t === 'object' && t.id) ? t.id : t; });
          data.forEach(function(tag) {
            if (selectedTagIds.includes(tag.id)) {
              selected.push(tag);
            }
          });
          selected.forEach(function(tag) {
            var option = new Option(tag.text || tag.name, tag.id, true, true);
            $('#tag-select').append(option).trigger('change');
          });
        }
      });
    }
    // Load selected domains for edit (nếu có)
    // Đã truyền domain name/id từ backend nên không cần AJAX này nữa
    // Add Manager button click (chỉ chạy nếu tồn tại nút add-manager-btn)
    var addBtn = document.getElementById('add-manager-btn');
    if (addBtn) {
      addBtn.addEventListener('click', function() {
        var modal = new bootstrap.Modal(document.getElementById('addManagerModal'));
        modal.show();
      });
    }
    // Save new manager (demo, should call backend in real app)
    var saveBtn = document.getElementById('save-manager-btn');
    if (saveBtn) {
      saveBtn.addEventListener('click', function() {
        var name = document.getElementById('new-manager-name').value.trim();
        var email = document.getElementById('new-manager-email').value.trim();
        if(name && email) {
          var newOption = new Option(name + ' (' + email + ')', 'new_' + Date.now(), true, true);
          $('#manager-select').append(newOption).trigger('change');
          bootstrap.Modal.getInstance(document.getElementById('addManagerModal')).hide();
          document.getElementById('new-manager-name').value = '';
          document.getElementById('new-manager-email').value = '';
        }
      });
    }
  });
</script>

<!-- ========== File Attachment AJAX Upload for Edit System ========= -->
<script>
$(function() {
  // Render deduplicated file list (old + new uploads)
  function renderFiles() {
    let html = '';
    const fileMap = new Map();
    // First, add all existing files by name
    window.existingFiles.forEach(function(file) {
      const key = file.originalname || file.name || '';
      fileMap.set(key, {
        ...file,
        type: 'existing',
        fileId: file._id || file.id,
        fileName: file.originalname || file.name
      });
    });
    // Then, add all uploaded files by name, overwriting any existing file with the same name
    window.uploadedDocsEdit.forEach(function(file) {
      const key = file.originalname || file.name || '';
      fileMap.set(key, {
        ...file,
        type: 'uploaded',
        fileName: file.originalname || file.name
      });
    });
    if (fileMap.size > 0) {
      fileMap.forEach(function(file) {
        if (file.type === 'existing') {
          html += `<li class="list-group-item d-flex justify-content-between align-items-center">${file.originalname || file.name} <a href="${file.url}" target="_blank">[View]</a> <a href="#" class="remove-doc text-danger ms-2" data-type="existing" data-id="${file.fileId}" title="Delete"><i class="fa fa-trash"></i></a></li>`;
        } else if (file.type === 'uploaded') {
          html += `<li class="list-group-item d-flex justify-content-between align-items-center">${file.originalname || file.name} <a href="${file.url}" target="_blank">[View]</a> <a href="#" class="remove-doc text-danger ms-2" data-type="uploaded" data-name="${file.fileName}" title="Remove"><i class="fa fa-times"></i></a> <span class="badge bg-info ms-2">new</span></li>`;
        }
      });
    } else {
      html = '<li class="list-group-item text-muted">No files uploaded.</li>';
    }
    $('#uploaded-files-list').html(html);
    $('#uploaded-docs-edit-hidden').val(JSON.stringify(window.uploadedDocsEdit));
    $('#delete_files').val(JSON.stringify(window.deleteFiles));
  }

  renderFiles();

  // Remove file (old or new) on × click
  $('#uploaded-files-list').on('click', '.remove-doc', function(e) {
    e.preventDefault();
    var type = $(this).data('type');
    if (type === 'existing') {
      var fileId = $(this).data('id');
      var idx = window.existingFiles.findIndex(f => (f._id || f.id) == fileId);
      if (idx !== -1) {
        window.deleteFiles.push(fileId);
        window.existingFiles.splice(idx, 1);
        renderFiles();
      }
    } else if (type === 'uploaded') {
      var fileName = $(this).data('name');
      var idx = window.uploadedDocsEdit.findIndex(f => (f.originalname || f.name) === fileName);
      if (idx !== -1) {
        window.uploadedDocsEdit.splice(idx, 1);
        renderFiles();
      }
    }
  });

  // Handle new file uploads via AJAX
  $('#docs-upload-edit').on('change', function(e) {
    const files = Array.from(this.files);
    if (!files.length) return;
    let uploadCount = 0;
    files.forEach(file => {
      // Check duplicate by name in both existingFiles and uploadedDocsEdit
      const isDuplicate = window.existingFiles.some(f => (f.originalname || f.name) === file.name)
        || window.uploadedDocsEdit.some(f => (f.originalname || f.name) === file.name);
      if (isDuplicate) {
        uploadCount++;
        if (uploadCount === files.length) {
          $('#docs-upload-edit').val('');
        }
        return; // skip duplicate
      }
      const formData = new FormData();
      formData.append('file', file);
      $.ajax({
        url: '/api/upload',
        type: 'POST',
        data: formData,
        processData: false,
        contentType: false,
        xhrFields: { withCredentials: true }, // Đảm bảo gửi cookie/session
        success: function(res) {
          let uploaded = null;
          if (res.success && res.files && res.files.length > 0) {
            uploaded = res.files[0];
          } else if (res.file) {
            uploaded = res.file;
          }
          if (uploaded) {
            // Chỉ kiểm tra trùng tên với file cũ (existingFiles)
            const isDup = window.existingFiles.some(f => (f.originalname || f.name) === (uploaded.originalname || uploaded.name));
            if (!isDup) {
              window.uploadedDocsEdit.push(uploaded);
              renderFiles();
            }
          }
        },
        error: function(xhr, status, error) {
          alert('Upload failed!');
        },
        complete: function() {
          uploadCount++;
          if (uploadCount === files.length) {
            $('#docs-upload-edit').val('');
          }
        }
      });
    });
  });
});
</script>
<!-- ========== END File Attachment AJAX Upload for Edit System ========= -->
