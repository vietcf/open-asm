<div class="container-fluid">
  <form class="input-group mb-3 justify-content-end align-items-center" role="search" method="get" action="/administrator/roles" style="margin-top: 2.5rem; margin-right: 0.5rem; max-width: 500px; margin-left: auto;">
    <input class="form-control rounded-start me-2" type="search" name="search" placeholder="Search role name, description..." aria-label="Search" value="<%= typeof search !== 'undefined' ? search : '' %>">
    <select class="form-select form-select-sm me-2" name="pageSize" onchange="this.form.submit()" style="width:90px;max-width:90px;">
      <% (pageSizeOptions || [10,20,50]).forEach(function(size) { %>
        <option value="<%= size %>" <%= pageSize == size ? 'selected' : '' %>><%= size %> / page</option>
      <% }) %>
    </select>
    <button class="btn btn-outline-secondary rounded-end" type="submit"><i class="bi bi-search"></i></button>
  </form>
  <div class="row mb-3">
    <div class="col-12" style="margin-top: 16px;">
      <div class="button-container d-flex justify-content-end align-items-center">
      <% if (hasPermission('role.create')) { %>
      <button type="button" class="btn btn-primary btn-sm me-2" data-bs-toggle="modal" data-bs-target="#addRoleModal">
        <i class="bi bi-plus"></i> Add Role
      </button>
      <a href="/administrator/roles/template" class="btn btn-info btn-sm me-2" download>
        <i class="bi bi-download"></i> Download Template
      </a>
      <button type="button" class="btn btn-success btn-sm me-2" data-bs-toggle="modal" data-bs-target="#importRoleModal">
        <i class="bi bi-upload"></i> Import Role
      </button>
      <% } %>
      <% if (hasPermission('role.read')) { %>
        <form id="roleExportForm" action="/administrator/roles/export" method="GET" style="display:inline; margin-right: 8px;">
          <input type="hidden" name="search" value="<%= typeof search !== 'undefined' ? search : '' %>">
          <button type="submit" class="btn btn-warning btn-sm">
            <i class="bi bi-download"></i> Export
          </button>
        </form>
      <% } %>
    </div>
  </div>
  <div class="row">
    <div class="col-12">
      <div class="card">
        <div class="card-header">
          <h3 class="card-title mb-0">Role List</h3>
        </div>
        <div class="card-body table-responsive p-0" style="max-height: 70vh; overflow-y: auto; overflow-x: auto;">
          <table class="table table-hover">
            <thead>
              <tr>
                <th>No.</th>
                <th>Name</th>
                <th>Description</th>
                <th>Permissions</th>
                <th class="text-end">Actions</th>
              </tr>
            </thead>
            <tbody>
              <% if (roleList && roleList.length > 0) { %>
                <% roleList.forEach(function(role, idx) { %>
                  <tr>
                    <td><%= idx + 1 %></td>
                    <td><%= role.name %></td>
                    <td><%= role.description %></td>
                    <td>
                      <% const sortedPerms = (role.permissions || []).slice().sort((a, b) => a.name.localeCompare(b.name)); %>
                      <% let shownCount = 0; %>
                      <% if (sortedPerms.length > 0) { %>
                        <% let hasRead = sortedPerms.some(perm => perm.name === 'read'); %>
                        <% if (hasRead && sortedPerms.length > 1) { %>
                          <% sortedPerms.forEach(function(perm) { %>
                            <% if (perm.name !== 'read' && shownCount < 3) { %>
                              <span class="badge bg-primary"><%= perm.name %></span>
                              <% shownCount++; %>
                            <% } %>
                          <% }); %>
                          <% if (shownCount < 3) { %>
                            <span class="badge bg-primary">read</span>
                            <% shownCount++; %>
                          <% } %>
                        <% } else { %>
                          <% sortedPerms.forEach(function(perm) { %>
                            <% if (shownCount < 3) { %>
                              <span class="badge bg-primary"><%= perm.name %></span>
                              <% shownCount++; %>
                            <% } %>
                          <% }); %>
                        <% } %>
                        <% if (sortedPerms.length > 3) { %>
                          <span class="badge bg-secondary">...</span>
                          <a href="#" data-bs-toggle="modal" data-bs-target="#rolePermModal-<%= role.id %>">View all</a>
                        <% } %>
                      <% } else { %>
                        <span class="text-muted">No permission</span>
                      <% } %>
                    </td>
                    <td class="text-end">
                      <% if (role.name !== 'superadmin') { %>
                        <% if (hasPermission('role.update')) { %>
                        <a href="#" class="btn btn-warning btn-sm" title="Edit" data-bs-toggle="modal" data-bs-target="#roleEditModal-<%= role.id %>"><i class="bi bi-pencil"></i></a>
                        <% } %>
                        <% if (hasPermission('role.delete')) { %>
                        <form action="/administrator/roles/<%= role.id %>?_method=DELETE" method="POST" style="display:inline">
                          <input type="hidden" name="_method" value="DELETE">
                          <button type="submit" class="btn btn-danger btn-sm" title="Delete" onclick="return confirm('Are you sure you want to delete?')"><i class="bi bi-trash"></i></button>
                        </form>
                        <% } %>
                      <% } else { %>
                        <span class="text-muted">Protected</span>
                      <% } %>
                    </td>
                  </tr>
                  <!-- Edit Role Modal -->
                  <% if (role.name !== 'superadmin' && hasPermission('role.update')) { %>
                    <div class="modal fade" id="roleEditModal-<%= role.id %>" tabindex="-1" aria-labelledby="roleEditModalLabel-<%= role.id %>" aria-hidden="true">
                      <div class="modal-dialog">
                        <div class="modal-content">
                          <form action="/administrator/roles/<%= role.id %>/edit?_method=PUT" method="POST">
                            <input type="hidden" name="_method" value="PUT">
                            <div class="modal-header">
                              <h5 class="modal-title" id="roleEditModalLabel-<%= role.id %>">Edit Role</h5>
                              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                              <div class="mb-3">
                                <label class="form-label">Name <span class="text-danger">*</span></label>
                                <input type="text" name="name" class="form-control form-control-sm" value="<%= role.name %>" required>
                              </div>
                              <div class="mb-3">
                                <label class="form-label">Description</label>
                                <input type="text" name="description" class="form-control form-control-sm" value="<%= role.description %>">
                              </div>
                              <div class="mb-3">
                                <label class="form-label">Permissions</label>
                                <div>
                                  <% 
                                    // Group permissions by menu prefix (e.g., 'user', 'device', etc.)
                                    // and sort each group by a custom order for actions
                                    const permGroups = {};
                                    const actionOrder = ['read', 'create', 'update', 'delete'];
                                    (allPermissions || []).forEach(function(perm) {
                                      const parts = perm.name.split('.');
                                      const prefix = parts.length > 1 ? parts[0] : 'Other';
                                      if (!permGroups[prefix]) permGroups[prefix] = [];
                                      permGroups[prefix].push(perm);
                                    });
                                    Object.keys(permGroups).sort().forEach(function(prefix) {
                                      // Sort permissions in each group by actionOrder, then by name
                                      permGroups[prefix].sort(function(a, b) {
                                        const aParts = a.name.split('.');
                                        const bParts = b.name.split('.');
                                        const aAction = aParts[1] || '';
                                        const bAction = bParts[1] || '';
                                        const aIdx = actionOrder.indexOf(aAction);
                                        const bIdx = actionOrder.indexOf(bAction);
                                        if (aIdx !== -1 && bIdx !== -1) return aIdx - bIdx;
                                        if (aIdx !== -1) return -1;
                                        if (bIdx !== -1) return 1;
                                        return a.name.localeCompare(b.name);
                                      });
                                  %>
                                    <div class="mb-2 border rounded p-2 bg-light">
                                      <div class="fw-bold mb-1 text-primary"><%= prefix.charAt(0).toUpperCase() + prefix.slice(1) %></div>
                                      <% permGroups[prefix].forEach(function(perm) { %>
                                        <div class="form-check form-check-inline">
                                          <input class="form-check-input" type="checkbox" name="permissions" value="<%= perm.id %>"
                                            <%= role.permissions.some(p => p.id === perm.id) ? 'checked' : '' %>>
                                          <label class="form-check-label"><%= perm.name %></label>
                                        </div>
                                      <% }); %>
                                    </div>
                                  <% }); %>
                                </div>
                              </div>
                            </div>
                            <div class="modal-footer">
                              <button type="button" class="btn btn-outline-secondary btn-sm" data-bs-dismiss="modal">Close</button>
                              <button type="submit" class="btn btn-primary btn-sm">Save Changes</button>
                            </div>
                          </form>
                        </div>
                      </div>
                    </div>
                  <% } %>
                  <!-- Modal hiển thị toàn bộ permission -->
                  <div class="modal fade" id="rolePermModal-<%= role.id %>" tabindex="-1" aria-labelledby="rolePermModalLabel-<%= role.id %>" aria-hidden="true">
                    <div class="modal-dialog">
                      <div class="modal-content">
                        <div class="modal-header">
                          <h5 class="modal-title" id="rolePermModalLabel-<%= role.id %>">Permissions of <%= role.name %></h5>
                          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                          <% if (sortedPerms.length > 0) { %>
                            <% 
                              // Group and sort permissions for the 'show more' modal
                              const permGroups = {};
                              const actionOrder = ['read', 'create', 'update', 'delete'];
                              sortedPerms.forEach(function(perm) {
                                const parts = perm.name.split('.');
                                const prefix = parts.length > 1 ? parts[0] : 'Other';
                                if (!permGroups[prefix]) permGroups[prefix] = [];
                                permGroups[prefix].push(perm);
                              });
                              Object.keys(permGroups).sort().forEach(function(prefix) {
                                // Sort permissions in each group by actionOrder, then by name
                                permGroups[prefix].sort(function(a, b) {
                                  const aParts = a.name.split('.');
                                  const bParts = b.name.split('.');
                                  const aAction = aParts[1] || '';
                                  const bAction = bParts[1] || '';
                                  const aIdx = actionOrder.indexOf(aAction);
                                  const bIdx = actionOrder.indexOf(bAction);
                                  if (aIdx !== -1 && bIdx !== -1) return aIdx - bIdx;
                                  if (aIdx !== -1) return -1;
                                  if (bIdx !== -1) return 1;
                                  return a.name.localeCompare(b.name);
                                });
                            %>
                              <div class="mb-2 border rounded p-2 bg-light">
                                <div class="fw-bold mb-1 text-primary"><%= prefix.charAt(0).toUpperCase() + prefix.slice(1) %></div>
                                <ul class="list-group mb-2">
                                  <% permGroups[prefix].forEach(function(perm) { %>
                                    <li class="list-group-item py-1 px-2"><span class="badge bg-primary"><%= perm.name %></span> <span class="text-muted small"><%= perm.description %></span></li>
                                  <% }); %>
                                </ul>
                              </div>
                            <% }); %>
                          <% } else { %>
                            <span class="text-muted">No permission</span>
                          <% } %>
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal">Close</button>
                        </div>
                      </div>
                    </div>
                  </div>
                <% }) %>
              <% } else { %>
                <tr><td colspan="5" class="text-center">No data</td></tr>
              <% } %>
            </tbody>
          </table>
        </div>
        <div class="card-footer clearfix">
          <div class="d-flex justify-content-between align-items-center px-3 pb-2" style="padding-top: 1rem;">
            <div>
              <span>Showing <%= roleList && roleList.length ? ((page - 1) * pageSize + 1) : 0 %> - <%= roleList && roleList.length ? ((page - 1) * pageSize + roleList.length) : 0 %> of <%= totalCount || '' %> roles</span>
            </div>
            <form method="get" class="d-flex align-items-center" style="gap: 8px;">
              <input type="hidden" name="page" value="<%= page %>">
              <label for="pageSizeSelect" class="mb-0 me-1">Page size:</label>
              <select id="pageSizeSelect" name="pageSize" class="form-select form-select-sm" style="width:auto;display:inline-block;" onchange="this.form.submit()">
                <% (pageSizeOptions || [10,20,50]).forEach(function(size) { %>
                  <option value="<%= size %>" <%= pageSize == size ? 'selected' : '' %>><%= size %></option>
                <% }) %>
              </select>
            </form>
            <ul class="pagination pagination-sm m-0 float-end">
              <li class="page-item <%= page <= 1 ? 'disabled' : '' %>">
                <a class="page-link" href="?page=<%= page - 1 %>&pageSize=<%= pageSize %>" tabindex="-1">Previous</a>
              </li>
              <% 
                let startPage = 1;
                let endPage = totalPages;
                if (totalPages > 10) {
                  if (page <= 5) {
                    startPage = 1;
                    endPage = 10;
                  } else if (page + 4 >= totalPages) {
                    startPage = totalPages - 9;
                    endPage = totalPages;
                  } else {
                    startPage = page - 5 + 1;
                    endPage = page + 4;
                  }
                }
                for (let i = startPage; i <= endPage; i++) { 
              %>
                <li class="page-item <%= i === page ? 'active' : '' %>"><a class="page-link" href="?page=<%= i %>&pageSize=<%= pageSize %>"><%= i %></a></li>
              <% } %>
              <% if (endPage < totalPages) { %>
                <li class="page-item disabled"><span class="page-link">...</span></li>
              <% } %>
              <li class="page-item <%= page >= totalPages ? 'disabled' : '' %>">
                <a class="page-link" href="?page=<%= page + 1 %>&pageSize=<%= pageSize %>">Next</a>
              </li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  </div>
  <!-- Add Role Modal -->
  <% if (hasPermission('role.create')) { %>
  <div class="modal fade" id="addRoleModal" tabindex="-1" aria-labelledby="addRoleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <form action="/administrator/roles" method="POST">
          <div class="modal-header">
            <h5 class="modal-title" id="addRoleModalLabel">Add Role</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <div class="mb-3">
              <label class="form-label">Name <span class="text-danger">*</span></label>
              <input type="text" name="name" class="form-control form-control-sm" required>
            </div>
            <div class="mb-3">
              <label class="form-label">Description</label>
              <input type="text" name="description" class="form-control form-control-sm">
            </div>
            <div class="mb-3">
              <label class="form-label">Permissions</label>
              <div>
                <% 
                  // Group permissions by menu prefix (e.g., 'user', 'device', etc.)
                  // and sort each group by a custom order for actions
                  const permGroups = {};
                  const actionOrder = ['read', 'create', 'update', 'delete'];
                  (allPermissions || []).forEach(function(perm) {
                    const parts = perm.name.split('.');
                    const prefix = parts.length > 1 ? parts[0] : 'Other';
                    if (!permGroups[prefix]) permGroups[prefix] = [];
                    permGroups[prefix].push(perm);
                  });
                  Object.keys(permGroups).sort().forEach(function(prefix) {
                    // Sort permissions in each group by actionOrder, then by name
                    permGroups[prefix].sort(function(a, b) {
                      const aParts = a.name.split('.');
                      const bParts = b.name.split('.');
                      const aAction = aParts[1] || '';
                      const bAction = bParts[1] || '';
                      const aIdx = actionOrder.indexOf(aAction);
                      const bIdx = actionOrder.indexOf(bAction);
                      if (aIdx !== -1 && bIdx !== -1) return aIdx - bIdx;
                      if (aIdx !== -1) return -1;
                      if (bIdx !== -1) return 1;
                      return a.name.localeCompare(b.name);
                    });
                %>
                  <div class="mb-2 border rounded p-2 bg-light">
                    <div class="fw-bold mb-1 text-primary"><%= prefix.charAt(0).toUpperCase() + prefix.slice(1) %></div>
                    <% permGroups[prefix].forEach(function(perm) { %>
                      <div class="form-check form-check-inline">
                        <input class="form-check-input" type="checkbox" name="permissions" value="<%= perm.id %>">
                        <label class="form-check-label"><%= perm.name %></label>
                      </div>
                    <% }); %>
                  </div>
                <% }); %>
              </div>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-outline-secondary btn-sm" data-bs-dismiss="modal">Close</button>
            <button type="submit" class="btn btn-primary btn-sm">Add Role</button>
          </div>
        </form>
      </div>
    </div>
  </div>
  <% } %>
</div>
<script>
function showToast(msg, type) {
  const toast = document.createElement('div');
  toast.className = `alert alert-${type}`;
  toast.style.position = 'fixed';
  toast.style.top = '16px';
  toast.style.right = '16px';
  toast.style.zIndex = 9999;
  toast.style.minWidth = '200px';
  toast.innerText = msg;
  document.body.appendChild(toast);
  setTimeout(() => toast.remove(), 3000);
}

// Permission checkbox logic: auto-check 'read' if 'create', 'update', or 'delete' is checked
function setupPermissionCheckboxLogic(modal) {
  const checkboxes = modal.querySelectorAll('input[type="checkbox"][name="permissions"]');
  const permGroups = {};
  checkboxes.forEach(cb => {
    const label = cb.nextElementSibling?.innerText || '';
    const match = label.match(/^(.*)\.(read|create|update|delete)$/i);
    if (match) {
      const prefix = match[1].trim().toLowerCase();
      const action = match[2].toLowerCase();
      if (!permGroups[prefix]) permGroups[prefix] = {};
      permGroups[prefix][action] = cb;
    }
  });
  Object.values(permGroups).forEach(group => {
    const updateReadState = () => {
      const anyChecked = ['create', 'update', 'delete'].some(action => group[action]?.checked);
      if (group['read']) {
        if (anyChecked) {
          group['read'].checked = true;
        } else {
          // Không ép buộc checked, giữ nguyên trạng thái read
        }
        // Không disable read, cho phép chọn/bỏ chọn độc lập
        group['read'].disabled = false;
      }
    };
    ['create', 'update', 'delete'].forEach(action => {
      if (group[action]) {
        group[action].addEventListener('change', updateReadState);
      }
    });
    // Không cần xử lý đặc biệt cho read, cho phép chọn/bỏ chọn tự do
    // Khởi tạo trạng thái ban đầu
    updateReadState();
  });
}

// Setup for Add Role Modal
const addRoleModal = document.getElementById('addRoleModal');
if (addRoleModal) {
  addRoleModal.addEventListener('shown.bs.modal', function() {
    setupPermissionCheckboxLogic(addRoleModal);
  });
}
// Setup for all Edit Role Modals
const editRoleModals = document.querySelectorAll('[id^="roleEditModal-"]');
editRoleModals.forEach(modal => {
  modal.addEventListener('shown.bs.modal', function() {
    setupPermissionCheckboxLogic(modal);
  });
});
</script>
<% if (success) { %>
  <script>
    window.addEventListener('DOMContentLoaded', function() {
      showToast('<%= success %>', 'success');
    });
  </script>
<% } %>
<% if (error) { %>
  <script>
    window.addEventListener('DOMContentLoaded', function() {
      showToast('<%= error %>', 'danger');
    });
  </script>

<!-- Responsive Tables CSS -->
<% } %>
