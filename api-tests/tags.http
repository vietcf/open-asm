# ========================================
# üè∑Ô∏è TAGS API TESTS (MINIMAL)
# ========================================
# ‚úÖ Uses centralized environment variables from .vscode/settings.json
# Variables: {{baseUrl}}, {{apiVersion}}, {{username}}, {{password}}
# Environment: development (change in VS Code status bar)
# ========================================

### 0. Login to get JWT Token (Run this first!)
# @name tagAuth
POST {{baseUrl}}/{{apiVersion}}/auth/login
Content-Type: application/json

{
  "username": "{{username}}",
  "password": "{{password}}"
}


# ========================================
# üìã BASIC TAG CRUD OPERATIONS
# ========================================

### 1. Get All Tags
GET {{baseUrl}}/{{apiVersion}}/tags
Accept: application/json
Authorization: Bearer {{tagAuth.response.body.token}}

### 2. Get Tag by ID
GET {{baseUrl}}/{{apiVersion}}/tags/5
Accept: application/json
Authorization: Bearer {{tagAuth.response.body.token}}

### 3. Create New Tag
# @name createTag
POST {{baseUrl}}/{{apiVersion}}/tags
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{tagAuth.response.body.token}}

{
  "name": "test-tag",
  "description": "Test tag for API testing"
}

### 4. Update Tag (Complete Update)
PUT {{baseUrl}}/{{apiVersion}}/tags/{{createTag.response.body.data.id}}
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{tagAuth.response.body.token}}

{
  "name": "test-tag-updated",
  "description": "Updated test tag"
}

### 5. Update Tag (Name Only)
PUT {{baseUrl}}/{{apiVersion}}/tags/{{createTag.response.body.data.id}}
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{tagAuth.response.body.token}}

{
  "name": "test-tag-name-only"
}

### 6. Update Tag (Description Only)
PUT {{baseUrl}}/{{apiVersion}}/tags/{{createTag.response.body.data.id}}
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{tagAuth.response.body.token}}

{
  "description": "Updated description only"
}

### 7. Delete Tag
DELETE {{baseUrl}}/{{apiVersion}}/tags/{{createTag.response.body.data.id}}
Accept: application/json
Authorization: Bearer {{tagAuth.response.body.token}}

# ========================================
# üîç SEARCH & FIND OPERATIONS
# ========================================

### 8. Search Tags with Pagination
GET {{baseUrl}}/{{apiVersion}}/tags/search?page=1&pageSize=5
Accept: application/json
Authorization: Bearer {{tagAuth.response.body.token}}

### 9. Search Tags by Keyword
GET {{baseUrl}}/{{apiVersion}}/tags/search?search=REST
Accept: application/json
Authorization: Bearer {{tagAuth.response.body.token}}

### 10. Find Tag by Exact Name
GET {{baseUrl}}/{{apiVersion}}/tags/find?name=produCtion
Accept: application/json
Authorization: Bearer {{tagAuth.response.body.token}}

# ========================================
# ‚ùå ERROR HANDLING TESTS
# ========================================

### 11. Get Non-existent Tag (404)
GET {{baseUrl}}/{{apiVersion}}/tags/99999
Accept: application/json
Authorization: Bearer {{tagAuth.response.body.token}}

### 12. Create Tag with Invalid Data (400)
POST {{baseUrl}}/{{apiVersion}}/tags
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{tagAuth.response.body.token}}

{
  "description": "Missing required name field"
}

### 13. Create Tag with Empty Name (400)
POST {{baseUrl}}/{{apiVersion}}/tags
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{tagAuth.response.body.token}}

{
  "name": "",
  "description": "Empty name should fail"
}

### 14. Update Non-existent Tag (404)
PUT {{baseUrl}}/{{apiVersion}}/tags/99999
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{tagAuth.response.body.token}}

{
  "name": "non-existent-tag"
}

### 15. Delete Non-existent Tag (404)
DELETE {{baseUrl}}/{{apiVersion}}/tags/99999
Accept: application/json
Authorization: Bearer {{tagAuth.response.body.token}}

# ========================================
# ‚úÖ BASIC TAGS API TEST CHECKLIST
# ========================================
# 
# BASIC CRUD OPERATIONS:
# ‚è≥ GET /api/v1/tags (get all tags)
# ‚è≥ GET /api/v1/tags/:id (get tag by ID)
# ‚è≥ POST /api/v1/tags (create new tag)
# ‚è≥ PUT /api/v1/tags/:id (update tag)
# ‚è≥ DELETE /api/v1/tags/:id (delete tag)
#
# SEARCH & FIND:
# ‚è≥ GET /api/v1/tags/search (search with pagination)
# ‚è≥ GET /api/v1/tags/find (find by exact name)
#
# ERROR HANDLING:
# ‚è≥ 400 - Invalid data/missing fields
# ‚è≥ 404 - Tag not found
# ‚è≥ 409 - Duplicate name/conflict
#
# ========================================
